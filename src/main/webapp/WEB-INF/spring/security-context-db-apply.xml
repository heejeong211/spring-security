<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                                 http://www.springframework.org/schema/beans/spring-beans.xsd
                                 http://www.springframework.org/schema/security
                                 http://www.springframework.org/schema/security/spring-security.xsd">
        
        <!-- 검사 URL -->
        <!-- use-expressions="true"해준 이유는 access="hasRole('ADMIN')"이걸 쓰기 위해서 임 -> SpEL -->
        <!-- access="permitAll" 모든 사람 접근 가능 -->
        <!-- intercept-url 순서 중요!!! 접근가능한 사람들의 범위 때문. 접근 제한이 가장 적을 순 부터 위로 -->
    <http auto-config="true" use-expressions="true">
        <intercept-url pattern="/login/loginForm" access="permitAll" />
        <intercept-url pattern="/" access="permitAll" />
        <intercept-url pattern="/admin/**" access="hasRole('ADMIN')" /> <!-- 관리자만 접근 가능 -->
        <intercept-url pattern="/**" access="hasAnyRole('USER, ADMIN')" /> <!-- 관리자 모든 접근 가능 -->
        
        <!-- 우리가 만든 login페이지 적용하는 부분 -->
        <!-- login-page="/login/loginForm" 로그인 인증을 처리할 주소를 뜻한다. -->
        <!-- default-target-url="/" 로그인이 완료되면 루트로 이동한다는 의미 -->
        <!-- authentication-failure-url 인증 실패시 "/login/loginForm?error" 가야하는 주소 -->
        <!--  username-parameter 로그인 폼에 아이디 입력 필드에 사용될 name 이다. 기본값은 "username" -->
        <!-- password-parameter 로그인 폼에 비밀번호 입력 필드에 사용될 name 이다. 기본값은 "password" -->
        <form-login login-page="/login/loginForm"
                    default-target-url="/"
                    authentication-failure-url="/login/loginForm?error"
                    username-parameter="id"
                    password-parameter="password" />
        
        <!-- logout이 제대로 되면 다시 홈으로 가라라는 의미 -> 알아서 session 날려버림 -->
        <logout logout-url="/logout"
                logout-success-url="/" />  
        
        <!-- access가 거부된 유저가 들어올 때 controller한테 이 주소 /login/accessDenied"를 넘겨줌 -> controller는 이 주소를 처리해야 함 -->        
        <access-denied-handler error-page="/login/accessDenied" />
    </http>
    
    <!-- JDBC를 이용한 인증/권한 처리 -->
    <!-- JDBC를 이용하여 인증/권한 체크 방식은 크게 두가지임. -->
   
    <!-- 1)지정된 형식으로 테이블생성 방법 => 지정된 형식으로 table 작성 후 아래와 같이 데이터 베이스만 연동 시켜도 됨. userName, password, enabled, authority는 Spring에서 지정된 컬럼명 -->
   	 <!-- <beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <beans:property name="dataSource" ref="dataSource"/>
    </beans:bean> 
    
      provider 
     users-by-username-query : login 쿼리
	 authorities-by-username-query : authority(권한) 쿼리
	 enabled 1이면 활성화 0이면 비활성화
      <authentication-manager>
        <authentication-provider>
        <jdbc-user-service 
            data-source-ref="dataSource"
            role-prefix=""
            users-by-username-query="select username, password, enabled from users where username = ?"
            authorities-by-username-query="select username, authority from authorities where username = ?"
        />
        </authentication-provider>
    </authentication-manager>  -->
   
    <!-- 2)기존에 작성된 데이터 베이스 연동 방법 -->
    <!-- => users-by-username-query를 통해 ID에 따른 비번 일치 여부를 확인 id가 ename, pw가 empno -->
    <!-- => authorities-by-username-query에서 로그인에 성공한 사용자 권한을 확인 -->
    <!-- 위의 두 쿼리를 활용하는 형태임 -->
    <!-- ex) scott의 기본적인 emp 테이블을 활용한 예 -->
    <beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <beans:property name="dataSource" ref="dataSource"/>
    </beans:bean> 
    
    <!--  provider  -->
    <authentication-manager>
        <authentication-provider>
        <jdbc-user-service 
            data-source-ref="dataSource"
            role-prefix=""
           users-by-username-query="select ename, empno, 1  from emp where ename = ?"
  			authorities-by-username-query="select ename, case when job='MANAGER' then 'ROLE_ADMIN' else  'ROLE_USER' end authority from emp where ename=?"  
        />
        <!-- 로그인 쿼리: 쿼리에서 뽑을 컬럼을 차례로 username, password, enabled 순으로 지정해준다. -->
		<!-- 권한 쿼리: 쿼리에서 뽑을 컬럼을 차례로 username, authority 순으로 지정해주면서, case when '직업이 매니저 이면 role을 admin으로 해주고 그 나머지 직업들은 role을 user로 해줌' 
			문법으로 사용하고 싶은 컬럼의 값을 authority 값의 형식으로 바꾸어주어 spring-security가 인식하도록 해준다! -->
        </authentication-provider>
    </authentication-manager>
   
   <!--  <authentication-manager> 
		<authentication-provider> 
			<user-service> 
				<user name="user" password="user" authorities="ROLE_USER" /> authorities 권한
				<user name="admin" password="admin" authorities="ROLE_ADMIN" />  
			</user-service> 
		</authentication-provider> 
	</authentication-manager> -->
    
</beans:beans>